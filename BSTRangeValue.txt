import java.util.Scanner;

class Node 
{
    int value;
    Node leftchild, rightchild;
  
    Node(int item) 
    {
        value = item;
        leftchild = rightchild = null;
    }
}

class BinaryTree
{
    Node root;
    
    int giftAmount(Node root, int low, int high)
    {
        if(low == -1 || high == -1)
            return 0;
        return numberOfNodes(root, low, high);
    }
    
    int numberOfNodes(Node root, int low, int high)
    {
        if(root == null)
            return 0;
        
        if(root.value >= low && root.value <= high)
            return 1 + numberOfNodes(root.leftchild, low, high)+
                numberOfNodes(root.rightchild, low, high);

        else if(root.value < low)
            return numberOfNodes(root.rightchild, low, high);
            
        else
            return numberOfNodes(root.leftchild, low, high);     
    }
}
class Source{
    public static void main(String args[]) 
    {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(52);
        tree.root.leftchild = new Node(28);
        tree.root.leftchild.leftchild = new Node(14);
        tree.root.leftchild.leftchild.leftchild = new Node(7);
        tree.root.leftchild.leftchild.rightchild = new Node(21);
        tree.root.leftchild.rightchild = new Node(36);
        tree.root.leftchild.rightchild.leftchild = new Node(30);
        tree.root.leftchild.rightchild.rightchild = new Node(42);
        tree.root.rightchild = new Node(76);
        tree.root.rightchild.leftchild = new Node(62);
        tree.root.rightchild.rightchild = new Node(90);
        tree.root.rightchild.rightchild.leftchild = new Node(80);
        tree.root.rightchild.rightchild.rightchild = new Node(100);
        
        Scanner scanner = new Scanner(System.in);
        int firstNumber = scanner.nextInt();
        int secondNumber = scanner.nextInt();
        
        int low = firstNumber > secondNumber ? secondNumber : firstNumber;
        int high = firstNumber > secondNumber ? firstNumber : secondNumber;

        System.out.println(tree.giftAmount(tree.root, low, high));
    }
}
